class Game extends Factory('hi.common.resources')

  @schema:
    id: '/game'
    type: 'object'
    properties:
      id:
        type: 'string'
      startTime:
        description: "DateTime including timezone"
        type: 'string'
        format: 'date-time'
      awayTeamId:
        type: 'string'
      homeTeamId:
        type: 'string'
      rosterIds:
        type: 'array'
      refereeIds:
        type: 'array'
      linesmanIds:
        type: 'array'
      arenaId:
        type: 'string'
    additionalProperties: false
    required: [
      'startTime'
      'arenaId'
      'awayTeamId'
      'homeTeamId'
    ]

  constructor: (DS) ->
    resource = DS.defineResource
      name: "game"
      meta:
        schema : Game.schema
      relations:
        belongsTo:
          arena:
            localField: 'arena'
            localKey: 'arenaId'
          team: [
            {
              localField: 'awayTeam'
              localKey: 'awayTeamId'
            }
            {
              localField: 'homeTeam'
              localKey: 'homeTeamId'
            }
          ]
        hasMany:
          gameRoster:
            localField: 'gameRosters'
            foreignKey: 'gameId'
          official: [
            {
              localField: 'referees'
              localKey: 'refereeIds'
            }
            {
              localField: 'linesmen'
              localKey: 'linesmanIds'
            }
          ]

    return resource

.state("game",
  url: "/game/:gameId"
  abstract: true
  resolve:
    ### @ngInject ###
    referees: (Game, $stateParams) ->
      Game.find($stateParams.gameId)
      .then (game) ->
        Game.loadRelations(game.id, ['referees'])
        .then (officials) ->
          officials
        .catch (error) ->
          console.log error
        )