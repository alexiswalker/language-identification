diff --git a/gamemode/modules/fadmin/fadmin/access/cl_init.lua b/gamemode/modules/fadmin/fadmin/access/cl_init.lua
index 010cf22..2f08ab6 100644
--- a/gamemode/modules/fadmin/fadmin/access/cl_init.lua
+++ b/gamemode/modules/fadmin/fadmin/access/cl_init.lua
@@ -4,6 +4,22 @@ local EditGroups
 
 local function RetrievePRIVS(len)
 	FAdmin.Access.Groups = net.ReadTable()
+
+	for k,v in pairs(FAdmin.Access.Groups) do
+		if CAMI.GetUsergroup(k) then continue end
+
+		CAMI.RegisterUsergroup({
+			Name = k,
+			Inherits = FAdmin.Access.ADMIN[v.ADMIN]
+		}, "FAdmin")
+	end
+
+	-- Remove any groups that are removed from FAdmin from CAMI.
+	for k,v in pairs(CAMI.GetUsergroups()) do
+		if FAdmin.Access.Groups[k] then continue end
+
+		CAMI.UnregisterUsergroup(k, "FAdmin")
+	end
 end
 net.Receive("FADMIN_SendGroups", RetrievePRIVS)
 
diff --git a/gamemode/modules/fadmin/fadmin/access/sh_shared.lua b/gamemode/modules/fadmin/fadmin/access/sh_shared.lua
index 7c31713..d437d4f 100644
--- a/gamemode/modules/fadmin/fadmin/access/sh_shared.lua
+++ b/gamemode/modules/fadmin/fadmin/access/sh_shared.lua
@@ -2,13 +2,22 @@ CreateConVar("_FAdmin_immunity", 1, {FCVAR_GAMEDLL, FCVAR_REPLICATED, FCVAR_ARCH
 
 FAdmin.Access = FAdmin.Access or {}
 FAdmin.Access.ADMIN = {"user", "admin", "superadmin"}
-FAdmin.Access.ADMIN[0] = "noaccess"
+FAdmin.Access.ADMIN[0] = "user"
 
 FAdmin.Access.Groups = FAdmin.Access.Groups or {}
 FAdmin.Access.Privileges = FAdmin.Access.Privileges or {}
 
 function FAdmin.Access.AddGroup(name, admin_access/*0 = not admin, 1 = admin, 2 = superadmin*/, privs, immunity)
 	FAdmin.Access.Groups[name] = FAdmin.Access.Groups[name] or {ADMIN = admin_access, PRIVS = privs or {}, immunity = immunity}
+
+	-- Register custom usergroups with CAMI
+	if name ~= "user" and name ~= "admin" and name ~= "superadmin" then
+		CAMI.RegisterUsergroup({
+			Name = name,
+			Inherits = FAdmin.Access.ADMIN[admin_access]
+		}, "FAdmin")
+	end
+
 	if not SERVER then return end
 
 	MySQLite.queryValue("SELECT COUNT(*) FROM FADMIN_GROUPS WHERE NAME = " .. MySQLite.SQLStr(name) .. ";", function(val)
@@ -32,20 +41,42 @@ function FAdmin.Access.AddGroup(name, admin_access/*0 = not admin, 1 = admin, 2
 	end
 end
 
+function FAdmin.Access.OnUsergroupRegistered(usergroup, source)
+	-- Don't re-add usergroups coming from FAdmin itself
+	if source == "FAdmin" then return end
+
+	local inheritRoot = CAMI.InheritanceRoot(usergroup.Inherits)
+	local admin_access = table.KeyFromValue(FAdmin.Access.ADMIN, inheritRoot)
+
+	-- Add groups registered to CAMI to FAdmin. Assume privileges from either the usergroup it inherits or its inheritance root.
+	-- Immunity is unknown and can be set by the user later. FAdmin immunity only applies to FAdmin anyway.
+	FAdmin.Access.AddGroup(usergroup.Name, admin_access, FAdmin.Access.Groups[usergroup.Inherits] or FAdmin.Access.Groups[inheritRoot] or {}, nil, true)
+end
+
+
+function FAdmin.Access.OnUsergroupUnregistered(usergroup, source)
+	if table.HasValue({"superadmin", "admin", "user", "noaccess"}, usergroup.Name) then return end
+
+	FAdmin.Access.Groups[usergroup.Name] = nil
+
+	if not SERVER then return end
+
+	MySQLite.query("DELETE FROM FADMIN_GROUPS WHERE NAME = ".. MySQLite.SQLStr(usergroup.Name)..";")
+
+	for k,v in pairs(player.GetAll()) do
+		FAdmin.Access.SendGroups(v)
+	end
+end
+
 function FAdmin.Access.RemoveGroup(ply, cmd, args)
 	if not FAdmin.Access.PlayerHasPrivilege(ply, "SetAccess") then FAdmin.Messages.SendMessage(ply, 5, "No access!") return false end
 	if not args[1] then return false end
 
-	if FAdmin.Access.Groups[args[1]] and not table.HasValue({"superadmin", "admin", "user", "noaccess"}, string.lower(args[1])) then
-		MySQLite.query("DELETE FROM FADMIN_GROUPS WHERE NAME = ".. MySQLite.SQLStr(args[1])..";")
-		FAdmin.Access.Groups[args[1]] = nil
-		FAdmin.Messages.SendMessage(ply, 4, "Group succesfully removed")
+	if not FAdmin.Access.Groups[args[1]] or table.HasValue({"superadmin", "admin", "user"}, string.lower(args[1])) then return true, args[1] end
 
-		for k,v in pairs(player.GetAll()) do
-			FAdmin.Access.SendGroups(v)
-		end
-	end
-	return true, args[1]
+	CAMI.UnregisterUsergroup(args[1], "FAdmin")
+
+	FAdmin.Messages.SendMessage(ply, 4, "Group succesfully removed")
 end
 
 local PLAYER = FindMetaTable("Player")
diff --git a/gamemode/modules/fadmin/fadmin/access/sv_init.lua b/gamemode/modules/fadmin/fadmin/access/sv_init.lua
index 1af6b91..510f033 100644
--- a/gamemode/modules/fadmin/fadmin/access/sv_init.lua
+++ b/gamemode/modules/fadmin/fadmin/access/sv_init.lua
@@ -36,12 +36,32 @@ hook.Add("DatabaseInitialized", "InitializeFAdminGroups", function()
 				if v.immunity and v.immunity ~= "NULL" then
 					FAdmin.Access.Groups[v.NAME].immunity = tonumber(v.immunity)
 				end
+
+				if CAMI.GetUsergroup(v.NAME) then continue end
+
+				CAMI.RegisterUsergroup({
+					Name = v.NAME,
+					Inherits = FAdmin.Access.ADMIN[v.ADMIN_ACCESS]
+				}, "FAdmin")
 			end
 
 			-- Send groups to early joiners and listen server hosts
 			for k,v in pairs(player.GetAll()) do
 				FAdmin.Access.SendGroups(v)
 			end
+
+			-- See if there are any CAMI usergroups that FAdmin doesn't know about yet.
+			-- FAdmin doesn't start listening immediately because the database might not have initialised.
+			-- Besides, other admin mods might add usergroups before FAdmin's Lua files are even run
+			for k,v in pairs(CAMI.GetUsergroups()) do
+				if FAdmin.Access.Groups[v.Name] then continue end
+
+				FAdmin.Access.OnUsergroupRegistered(v)
+			end
+
+			-- Start listening for CAMI usergroup registrations.
+			hook.Add("CAMI.OnUsergroupRegistered", "FAdmin", FAdmin.Access.OnUsergroupRegistered)
+			hook.Add("CAMI.OnUsergroupUnregistered", "FAdmin", FAdmin.Access.OnUsergroupUnregistered)
 		end)
 
 		local function createGroups(privs)
@@ -84,11 +104,14 @@ hook.Remove("PlayerInitialSpawn", "PlayerAuthSpawn") -- Remove Garry's usergroup
 
 local oldSetUsergroup = plyMeta.SetUserGroup
 function plyMeta:SetUserGroup(group, ...)
-	MySQLite.query("REPLACE INTO FAdmin_PlayerGroup VALUES(" .. MySQLite.SQLStr(self:SteamID())..", " .. MySQLite.SQLStr(group)..");")
-
 	return oldSetUsergroup(self, group, ...)
 end
 
+-- Update the database only when an end users indicates that a player's usergroup is to be changed.
+hook.Add("CAMI.PlayerUsergroupChanged", "FAdmin", function(ply, old, new, source)
+	MySQLite.query("REPLACE INTO FAdmin_PlayerGroup VALUES(" .. MySQLite.SQLStr(ply:SteamID()) .. ", " .. MySQLite.SQLStr(new) .. ");")
+end)
+
 function FAdmin.Access.SetRoot(ply, cmd, args) -- FAdmin setroot player. Sets the player to superadmin
 	if not FAdmin.Access.PlayerHasPrivilege(ply, "SetAccess") then FAdmin.Messages.SendMessage(ply, 5, "No access!") return false end
 
@@ -100,10 +123,16 @@ function FAdmin.Access.SetRoot(ply, cmd, args) -- FAdmin setroot player. Sets th
 
 	for _, target in pairs(targets) do
 		if IsValid(target) then
+			-- An end user changed the usergroup. Register with CAMI
+			CAMI.SignalUserGroupChanged(target, target:GetUserGroup(), "superadmin", "FAdmin")
+
 			FAdmin.Access.PlayerSetGroup(target, "superadmin")
+
+			-- TODO: Remove this when ULX implements CAMI ;)
 			if ULib and ULib.ucl and ULib.ucl.groups and ULib.ucl.groups["superadmin"] then --Add to ULX
 				ULib.ucl.addUser(target:SteamID(), nil, nil, "superadmin")
 			end
+
 			FAdmin.Messages.SendMessage(ply, 2, "User set to superadmin!")
 		end
 	end
@@ -208,10 +237,13 @@ function FAdmin.Access.SetAccess(ply, cmd, args)
 	end
 
 	for _, target in pairs(targets) do
-		if IsValid(target) then
-			FAdmin.Access.PlayerSetGroup(target, args[2])
-			FAdmin.Messages.SendMessage(ply, 4, "User access set!")
-		end
+		if not IsValid(target) then continue end
+
+		-- An end user changed the usergroup. Register with CAMI
+		CAMI.SignalUserGroupChanged(target, target:GetUserGroup(), args[2], "FAdmin")
+
+		FAdmin.Access.PlayerSetGroup(target, args[2])
+		FAdmin.Messages.SendMessage(ply, 4, "User access set!")
 	end
 	return true, targets, args[2]
 end
diff --git a/gamemode/modules/fadmin/sh_cami.lua b/gamemode/modules/fadmin/sh_cami.lua
index 3c1c29d..7743ff2 100644
--- a/gamemode/modules/fadmin/sh_cami.lua
+++ b/gamemode/modules/fadmin/sh_cami.lua
@@ -67,16 +67,25 @@ CAMI.RegisterUsergroup
 	Registers a usergroup with CAMI.
 
 	Parameters:
-		usergroup: CAMI_USERGROUP (see CAMI_USERGROUP structure)
+		usergroup
+			CAMI_USERGROUP
+			(see CAMI_USERGROUP structure)
+		source
+			any
+			Identifier for your own admin mod. Can be anything.
+			Use this to make sure CAMI.RegisterUsergroup function and the
+			CAMI.OnUsergroupRegistered hook don't cause an infinite loop
+
+
 
 	Return value:
 		CAMI_USERGROUP
 			The usergroup given as argument.
 ]]
-function CAMI.RegisterUsergroup(usergroup)
+function CAMI.RegisterUsergroup(usergroup, source)
 	usergroups[usergroup.Name] = usergroup
 
-	hook.Call("CAMI.OnUsergroupRegistered", nil, usergroup)
+	hook.Call("CAMI.OnUsergroupRegistered", nil, usergroup, source)
 	return usergroup
 end
 
@@ -109,18 +118,23 @@ CAMI.UnregisterUsergroup
 		usergroupName
 			string
 			The name of the usergroup.
+		source
+			any
+			Identifier for your own admin mod. Can be anything.
+			Use this to make sure CAMI.UnregisterUsergroup function and the
+			CAMI.OnUsergroupUnregistered hook don't cause an infinite loop
 
 	Return value:
 		bool
 			Whether the unregistering succeeded.
 ]]
-function CAMI.UnregisterUsergroup(usergroupName)
+function CAMI.UnregisterUsergroup(usergroupName, source)
 	if not usergroups[usergroupName] then return false end
 
 	local usergroup = usergroups[usergroupName]
 	usergroups[usergroupName] = nil
 
-	hook.Call("CAMI.OnUsergroupUnregistered", nil, usergroup)
+	hook.Call("CAMI.OnUsergroupUnregistered", nil, usergroup, source)
 
 	return true
 end
@@ -183,6 +197,36 @@ function CAMI.UsergroupInherits(usergroupName1, usergroupName2)
 end
 
 --[[
+CAMI.InheritanceRoot
+	All usergroups must eventually inherit either user, admin or superadmin.
+	Regardless of what inheritance mechism an admin may or may not have, this
+	always applies.
+
+	This method always returns either user, admin or superadmin, based on what
+	usergroups eventually inherit.
+
+	Parameters:
+		usergroupName
+			string
+			The name of the usergroup of which the root of inheritance is
+			requested
+
+	Return value:
+		string
+			The name of the root usergroup (either user, admin or superadmin)
+]]
+function CAMI.InheritanceRoot(usergroupName)
+	if not usergroups[usergroupName] then return end
+
+	local inherits = usergroups[usergroupName].Inherits
+	while inherits ~= usergroups[usergroupName].Inherits do
+		usergroupName = usergroups[usergroupName].Inherits
+	end
+
+	return usergroupName
+end
+
+--[[
 CAMI.RegisterPrivilege
 	Registers a privilege with CAMI.
 	Note: do NOT register all your admin mod's privileges with this function!
@@ -387,7 +431,10 @@ CAMI.SignalUserGroupChanged
 		new
 			string
 			The new usergroup of the player.
+		source
+			any
+			Identifier for your own admin mod. Can be anything.
 ]]
-function CAMI.SignalUserGroupChanged(ply, old, new)
+function CAMI.SignalUserGroupChanged(ply, old, new, source)
 	hook.Call("CAMI.PlayerUsergroupChanged", nil, ply, old, new)
 end