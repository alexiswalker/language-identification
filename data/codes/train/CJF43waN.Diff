From 4f763f40bec6db60e1752e1cc0bae97701791ebe Mon Sep 17 00:00:00 2001
From: Gabriele M <moto.falcon.git@gmail.com>
Date: Sat, 22 Aug 2015 00:16:00 +0200
Subject: [PATCH] ASoC: tpa6165a2: Implement multi-button detection

Change-Id: Iec055c7df9bac1998de5f04eb4b12fca9fd0a6c9
---
 sound/soc/codecs/tpa6165a2-core.h |   6 +
 sound/soc/codecs/tpa6165a2.c      | 237 ++++++++++++++++++++++++++------------
 2 files changed, 170 insertions(+), 73 deletions(-)

diff --git a/sound/soc/codecs/tpa6165a2-core.h b/sound/soc/codecs/tpa6165a2-core.h
index 64528d8..2f64148 100755
--- a/sound/soc/codecs/tpa6165a2-core.h
+++ b/sound/soc/codecs/tpa6165a2-core.h
@@ -167,6 +167,12 @@ struct tpa6165_regs {
 	u8 value;
 };
 
+struct multi_button {
+	enum snd_jack_types type;
+	int min_r;
+	int max_r;
+};
+
 extern int tpa6165_hs_detect(struct snd_soc_codec *codec);
 
 extern void tpa6165_hp_event(int event);
diff --git a/sound/soc/codecs/tpa6165a2.c b/sound/soc/codecs/tpa6165a2.c
index 7c4400d..164cde4 100755
--- a/sound/soc/codecs/tpa6165a2.c
+++ b/sound/soc/codecs/tpa6165a2.c
@@ -51,7 +51,8 @@
 
 #define TPA6165A2_JACK_MASK (SND_JACK_HEADSET | SND_JACK_HEADPHONE| \
 				SND_JACK_UNSUPPORTED)
-#define TPA6165A2_JACK_BUTTON_MASK (SND_JACK_BTN_0)
+#define TPA6165A2_JACK_BUTTON_MASK (SND_JACK_BTN_0 | SND_JACK_BTN_1 | \
+				SND_JACK_BTN_2 | SND_JACK_BTN_3)
 
 #define VDD_UA_ON_LOAD	10000
 
@@ -74,6 +75,7 @@ struct tpa6165_data {
 	int hs_acc_type;
 	int inserted;
 	int button_pressed;
+	int multi_button_pressed;
 	int amp_state;
 	int mic_state;
 	int sleep_state;
@@ -156,6 +158,24 @@ static const struct tpa6165_regs tpa6165_reg_defaults[] = {
 },
 };
 
+static const struct multi_button multi_button_buttons[] = {
+{
+	.type = SND_JACK_BTN_1,
+	.min_r = 50,
+	.max_r = 65,
+},
+{
+	.type = SND_JACK_BTN_2,
+	.min_r = 66,
+	.max_r = 80,
+},
+{
+	.type = SND_JACK_BTN_3,
+	.min_r = 200,
+	.max_r = 300,
+},
+};
+
 /* I2C Read/Write Functions */
 static int tpa6165_i2c_read(struct tpa6165_data *tpa6165, u8 reg, u8 *value)
 {
@@ -833,93 +853,162 @@ static int tpa6165_get_hs_acc_type(struct tpa6165_data *tpa6165)
 	return acc_type;
 }
 
+static int tpa6165_detect_multi_button(struct tpa6165_data *tpa6165,
+					enum snd_jack_types *button)
+{
+	u8 resistance;
+	u8 keyscan;
+	int i;
+
+	tpa6165_reg_read(tpa6165, TPA6165_MB_KEYSCAN_REG, &keyscan);
+	resistance = keyscan & 0x7F;
+	if (keyscan & BIT(7))
+		resistance *= 4;
+
+	pr_debug("%s: Measured resistance: %d\n", __func__, resistance);
+
+	for (i = 0; i < ARRAY_SIZE(multi_button_buttons); i++) {
+		if (resistance >= multi_button_buttons[i].min_r &&
+				resistance <= multi_button_buttons[i].max_r) {
+			*button = multi_button_buttons[i].type;
+			return 0;
+		}
+	}
+
+	return -EINVAL;
+}
+
 static void tpa6165_report_button(struct tpa6165_data *tpa6165)
 {
+	bool single_button = tpa6165->dev_status_reg1 & TPA6165_JACK_BUTTON;
+	bool multi_button = tpa6165->dev_status_reg2 & TPA6165_MULTI_BUTTON;
+	bool try_stop_detection = false;
+
 	if (tpa6165->mono_hs_detect_state)
 		/* ignore button presses in this state */
 		return;
 
-	if ((tpa6165->dev_status_reg1 & TPA6165_JACK_BUTTON)) {
-		/* if already in button detect state, check for
-		 * button press/release.
+	if (!single_button && !multi_button) {
+		pr_warn("%s: Spurious event detected\n", __func__);
+		return;
+	}
+
+	/*
+	 * FIXME: A very light press can wakeup the chip without
+	 * putting it back to sleep.
+	 */
+	if (single_button && !tpa6165->button_detect_state) {
+		/* at this point not sure if it is single or
+		 * or multi, button event wake up the IC and
+		 * trigger button type detection register
+		 * sequence.this should trigger an interrupt
+		 * which should tell us if it is multibutton
+		 * or single button press.
 		 */
-		if (tpa6165->button_detect_state) {
-			if (!(tpa6165->dev_status_reg2 & TPA6165_PRESS) &&
-						tpa6165->button_pressed) {
-				pr_debug("%s:report button release", __func__);
-				snd_soc_jack_report_no_dapm(
-					tpa6165->button_jack,
-					0, tpa6165->button_jack->jack->type);
-
-				tpa6165->button_pressed = 0;
-				pr_debug("%s:turn off button det state",
-							__func__);
-				if ((tpa6165->amp_state ==
-						TPA6165_AMP_DISABLED) &&
-						(tpa6165->mic_state ==
-						TPA6165_MIC_DISABLED)) {
-					/* safe to trigger sleep state now */
-					if (tpa6165->alwayson_micb ||
-							tpa6165->special_hs)
-						tpa6165_sleep(tpa6165,
-							TPA6165_SPECIAL_SLEEP);
-					else
-						tpa6165_sleep(tpa6165,
-							TPA6165_SLEEP);
-				}
-				tpa6165_button_detect_state(tpa6165, 0);
-			} else if ((tpa6165->dev_status_reg2 & TPA6165_PRESS)
-					&& (!tpa6165->button_pressed)) {
-				pr_debug("%s:report button pressed",
-						__func__);
+		pr_debug("%s: Trigger button press detect state",
+					__func__);
+		tpa6165_sleep(tpa6165, TPA6165_WAKEUP);
+		tpa6165_button_detect_state(tpa6165, 1);
+
+		return;
+	}
+
+	if (single_button) {
+		if (!(tpa6165->dev_status_reg2 & TPA6165_PRESS) &&
+				tpa6165->button_pressed) {
+			pr_debug("%s: Report button release", __func__);
+			snd_soc_jack_report_no_dapm(
+				tpa6165->button_jack,
+				tpa6165->multi_button_pressed,
+				tpa6165->button_jack->jack->type);
+
+			tpa6165->button_pressed = 0;
+			try_stop_detection = true;
+		} else if ((tpa6165->dev_status_reg2 & TPA6165_PRESS) &&
+				!tpa6165->button_pressed) {
+			pr_debug("%s: Report button pressed",
+					__func__);
+			snd_soc_jack_report_no_dapm(
+				tpa6165->button_jack,
+				SND_JACK_BTN_0 | tpa6165->multi_button_pressed,
+				tpa6165->button_jack->jack->type);
+			tpa6165->button_pressed = SND_JACK_BTN_0;
+		} else {
+			if (tpa6165->dev_status_reg1 & TPA6165_VOL_SLEW_DONE) {
+				pr_err("%s: Unknown button state", __func__);
+				/* clear vol slew interrupt mask */
+				tpa6165_reg_write(tpa6165,
+					TPA6165_INT_MASK_REG1,
+					~TPA6165_VOL_SLEW_DONE,
+					TPA6165_VOL_SLEW_DONE);
+			}
+		}
+	} else if (multi_button) {
+		if (!(tpa6165->dev_status_reg2 & TPA6165_PRESS) &&
+				tpa6165->multi_button_pressed) {
+			pr_debug("%s: Report multi-button release", __func__);
+
+			/*
+			 * FIXME: we should check that we are actually
+			 * releasing tpa6165->multi_button_pressed and
+			 * not some other button.
+			 */
+			snd_soc_jack_report_no_dapm(
+				tpa6165->button_jack,
+				tpa6165->button_pressed,
+				tpa6165->button_jack->jack->type);
+
+			tpa6165->multi_button_pressed = 0;
+			try_stop_detection = true;
+		} else if ((tpa6165->dev_status_reg2 & TPA6165_PRESS) &&
+				!tpa6165->multi_button_pressed) {
+			enum snd_jack_types button_detected;
+			int ret;
+
+			pr_debug("%s: Report multi button pressed",
+					__func__);
+
+			ret = tpa6165_detect_multi_button(tpa6165, &button);
+			if (ret < 0) {
+				/* Invalid button, stop detection */
+				pr_err("%s: Unknown button pressed\n", __func__);
+				try_stop_detection = true;
+			} else {
+				tpa6165->multi_button_pressed = button;
 				snd_soc_jack_report_no_dapm(
 					tpa6165->button_jack,
-					SND_JACK_BTN_0,
+					button | tpa6165->button_pressed,
 					tpa6165->button_jack->jack->type);
-				tpa6165->button_pressed = 1;
-			} else {
-				if (tpa6165->dev_status_reg1 &
-						TPA6165_VOL_SLEW_DONE) {
-					pr_err("%s:Unknown button state",
-						__func__);
-					/* clear vol slew interrupt mask */
-					tpa6165_reg_write(tpa6165,
-						TPA6165_INT_MASK_REG1,
-						~TPA6165_VOL_SLEW_DONE,
-						TPA6165_VOL_SLEW_DONE);
-				}
 			}
 		} else {
-			/* at this point not sure if it is single or
-			 * or multi, button event wake up the IC and
-			 * trigger button type detection register
-			 * sequence.this should trigger an interrupt
-			 * which should tell us if it is multibutton
-			 * or single button press.
-			 */
-			pr_debug("%s:trigger button press detect state",
-						__func__);
-			tpa6165_sleep(tpa6165, TPA6165_WAKEUP);
-			tpa6165_button_detect_state(tpa6165, 1);
+			if (tpa6165->dev_status_reg1 & TPA6165_VOL_SLEW_DONE) {
+				pr_err("%s: Unknown button state", __func__);
+				/* clear vol slew interrupt mask */
+				tpa6165_reg_write(tpa6165,
+					TPA6165_INT_MASK_REG1,
+					~TPA6165_VOL_SLEW_DONE,
+					TPA6165_VOL_SLEW_DONE);
+			}
 		}
-	} else if (tpa6165->dev_status_reg2 & TPA6165_MULTI_BUTTON) {
-		/* it is passive multibutton press not supported now
-		 * in android, so nothing report here. Just put the.
-		 * IC back in sleep.
-		 */
-		pr_debug("%s:multi button press detected", __func__);
-		if (tpa6165->button_detect_state &&
-				tpa6165->amp_state == TPA6165_AMP_DISABLED &&
-				tpa6165->mic_state == TPA6165_MIC_DISABLED) {
-			pr_debug("%s:turn off button det", __func__);
+	}
+
+	if (try_stop_detection &&
+			!tpa6165->multi_button_pressed &&
+			!tpa6165->button_pressed) {
+		pr_debug("%s: Turn off button det state\n", __func__);
+		tpa6165_button_detect_state(tpa6165, 0);
+
+		if ((tpa6165->amp_state == TPA6165_AMP_DISABLED) &&
+				(tpa6165->mic_state == TPA6165_MIC_DISABLED)) {
+			pr_debug("%s: Sleep", __func__);
+			/* safe to trigger sleep state now */
 			if (tpa6165->alwayson_micb || tpa6165->special_hs)
-					tpa6165_sleep(tpa6165,
-						TPA6165_SPECIAL_SLEEP);
-				else
-					tpa6165_sleep(tpa6165, TPA6165_SLEEP);
-				tpa6165_button_detect_state(tpa6165, 0);
+				tpa6165_sleep(tpa6165, TPA6165_SPECIAL_SLEEP);
+			else
+				tpa6165_sleep(tpa6165, TPA6165_SLEEP);
 		}
 	}
+
 }
 
 static int tpa6165_report_hs(struct tpa6165_data *tpa6165)
@@ -947,9 +1036,10 @@ static int tpa6165_report_hs(struct tpa6165_data *tpa6165)
 		snd_soc_jack_report_no_dapm(tpa6165->hs_jack, 0,
 					tpa6165->hs_jack->jack->type);
 		/* check if button pressed when jack removed */
-		if (tpa6165->button_pressed) {
+		if (tpa6165->button_pressed || tpa6165->multi_button_pressed) {
 			/* report button released */
 			tpa6165->button_pressed = 0;
+			tpa6165->multi_button_pressed = 0;
 			snd_soc_jack_report_no_dapm(tpa6165->button_jack,
 				0, tpa6165->button_jack->jack->type);
 		}
@@ -1491,6 +1581,7 @@ static int __devinit tpa6165_probe(struct i2c_client *client,
 	tpa6165->gpio = tpa6165_pdata->irq_gpio;
 	tpa6165->inserted = 0;
 	tpa6165->button_pressed = 0;
+	tpa6165->multi_button_pressed = 0;
 	tpa6165->button_jack = NULL;
 	tpa6165->hs_jack = NULL;
 	/* This flag is used to indicate that mic bias should be always
-- 
2.5.0