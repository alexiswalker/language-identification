# HG changeset patch
# User clanat <clanat001@gmail.com>
# Date 1390910399 -21600
# Branch trunk
# Node ID 2f45befdc2a84195722c8c2ac597433da014321c
# Parent  b89492f76d6773a781bffb282cd4af5feb69961f
Improvements in polymorph/desorient movement

diff --git a/src/game/ConfusedMovementGenerator.cpp b/src/game/ConfusedMovementGenerator.cpp
--- a/src/game/ConfusedMovementGenerator.cpp
+++ b/src/game/ConfusedMovementGenerator.cpp
@@ -35,6 +35,9 @@
 
     unit.StopMoving();
     unit.addUnitState(UNIT_STAT_CONFUSED);
+
+    unit.GetPosition(sPos.x, sPos.y, sPos.z);
+    to_sPos = false;
 }
 
 
@@ -54,8 +57,32 @@
 template<class UNIT>
 void ConfusedMovementGenerator<UNIT>::_generateMovement(UNIT &unit)
 {
+    // Get array of valid points in angle
     for (uint8 idx = 0; idx < MAX_RANDOM_POINTS; ++idx)
-        unit.GetValidPointInAngle(_randomPosition[idx], WANDER_DISTANCE, frand(0, 2*M_PI), true, true);
+    {
+        Position tmp;
+        float angle;
+        if (!unit.IsPolymorphed())
+            // For blind/scatter shot and the same spells
+            angle = frand(-M_PI/4, M_PI/4);
+        else
+            // For polymorph
+            angle = frand(0, M_PI*2);
+
+        unit.GetValidPointInAngle(tmp, WANDER_DISTANCE, angle, true, true);
+        if (unit.GetExactDist2d(tmp.x, tmp.y) < WANDER_DISTANCE - 0.5f)
+            for (uint8 j = 0; j < 8; ++j)
+            {
+                angle += M_PI/4;
+                unit.GetValidPointInAngle(tmp, WANDER_DISTANCE, angle, true, true);
+
+                if (unit.GetExactDist2d(tmp.x, tmp.y) < WANDER_DISTANCE - 0.5f)
+                    continue;
+                else
+                    break;
+            }
+        unit.GetValidPointInAngle(rPos[idx], WANDER_DISTANCE, angle, true, true);
+    }
 }
 
 template<class UNIT>
@@ -70,19 +97,46 @@
 
         Movement::MoveSplineInit init(unit);
 
-        PathFinder path(&unit);
-        path.setPathLengthLimit(30.0f);
-        bool result = path.calculate(_randomPosition[nextMove].x, _randomPosition[nextMove].y, _randomPosition[nextMove].z);
-        if (!result || path.getPathType() & PATHFIND_NOPATH)
-            init.MoveTo(_randomPosition[nextMove].x, _randomPosition[nextMove].y, _randomPosition[nextMove].z);
+        if (to_sPos && !unit.IsPolymorphed())
+        {
+            PathFinder path(&unit);
+            path.setPathLengthLimit(30.0f);
+            bool result = path.calculate(sPos.x, sPos.y, sPos.z);
+            if (!result || path.getPathType() & PATHFIND_NOPATH)
+                init.MoveTo(rPos[nextMove].x, rPos[nextMove].y, rPos[nextMove].z);
+            else
+                init.MovebyPath(path.getPath());
+
+            init.SetWalk(true);
+            init.Launch();
+
+            static_cast<MovementGenerator*>(this)->_recalculateTravel = false;
+            _nextMoveTime.Reset(urand(800, 1000));
+
+            to_sPos = false;
+        }
         else
-            init.MovebyPath(path.getPath());
+        {
+            PathFinder path(&unit);
+            path.setPathLengthLimit(30.0f);
+            bool result = path.calculate(rPos[nextMove].x, rPos[nextMove].y, rPos[nextMove].z);
+            if (!result || path.getPathType() & PATHFIND_NOPATH)
+                init.MoveTo(rPos[nextMove].x, rPos[nextMove].y, rPos[nextMove].z);
+            else
+                init.MovebyPath(path.getPath());
 
-        init.SetWalk(true);
-        init.Launch();
+            init.SetWalk(true);
+            init.Launch();
 
-        static_cast<MovementGenerator*>(this)->_recalculateTravel = false;
-        _nextMoveTime.Reset(urand(0, 2000));
+            static_cast<MovementGenerator*>(this)->_recalculateTravel = false;
+            if (unit.IsPolymorphed())
+                _nextMoveTime.Reset(urand(1500, 2000));
+            else
+            {
+                to_sPos = true;
+                _nextMoveTime.Reset(urand(800, 1000));
+            }
+        }
     }
     return true;
 }
diff --git a/src/game/ConfusedMovementGenerator.h b/src/game/ConfusedMovementGenerator.h
--- a/src/game/ConfusedMovementGenerator.h
+++ b/src/game/ConfusedMovementGenerator.h
@@ -49,7 +49,8 @@
 
         TimeTrackerSmall _nextMoveTime;
 
-        Position _randomPosition[MAX_RANDOM_POINTS+1];
+        Position sPos, rPos[MAX_RANDOM_POINTS+1];
+        bool to_sPos;
 };
 
 #endif