diff --git a/src/game/Chat.cpp b/src/game/Chat.cpp
index afd4b60..2b5599d 100644
--- a/src/game/Chat.cpp
+++ b/src/game/Chat.cpp
@@ -678,7 +678,26 @@ ChatCommand* ChatHandler::getCommandTable()
         { "account",        SEC_ADMINISTRATOR,  true,  &ChatHandler::HandleUnBanAccountCommand,      "", NULL },
         { "character",      SEC_ADMINISTRATOR,  true,  &ChatHandler::HandleUnBanCharacterCommand,    "", NULL },
         { "ip",             SEC_ADMINISTRATOR,  true,  &ChatHandler::HandleUnBanIPCommand,           "", NULL },
-        { NULL,             0,                  false, NULL,                                           "", NULL }
+        { NULL,             0,                  false, NULL,                                         "", NULL }
+    };
+
+    static ChatCommand playerbotAICommandTable[] =
+    {
+        "on", SEC_PLAYER, false, &ChatHandler::HandlePlayerbotEnableAIForCountCommand, "", NULL,
+        "on_all",   SEC_PLAYER, false, &ChatHandler::HandlePlayerbotEnableAIForAllCommand,      "", NULL,
+        "off", SEC_PLAYER, false, &ChatHandler::HandlePlayerbotDisableAIForCountCommand, "", NULL,
+        "off_all",  SEC_PLAYER, false, &ChatHandler::HandlePlayerbotDisableAIForAllCommand,     "", NULL,
+        NULL,       0,          false, NULL,                                                    "", NULL
+    };
+
+    static ChatCommand playerbotCommandTable[] =
+    {
+        { "add",            SEC_PLAYER,     false,  &ChatHandler::HandlePlayerbotLoginWithCountCommand, "", NULL },
+        { "delete",         SEC_PLAYER,     false,  NULL,                                               "", NULL },
+        { "add_all",        SEC_PLAYER,     false,  NULL,                                               "", NULL }, 
+        { "del_all",        SEC_PLAYER,     false,  &ChatHandler::HandlePlayerbotLogoutAllCommand,      "", NULL },
+        { "ai",             SEC_PLAYER,     false,  NULL,                                               "", playerbotAICommandTable },
+        { NULL,             0,              false,  NULL,                                               "", NULL }
     };
 
     static ChatCommand wpCommandTable[] =
@@ -780,7 +799,9 @@ ChatCommand* ChatHandler::getCommandTable()
         { "stable",         SEC_ADMINISTRATOR,  false, &ChatHandler::HandleStableCommand,              "", NULL },
         { "waterwalk",      SEC_GAMEMASTER,     false, &ChatHandler::HandleWaterwalkCommand,           "", NULL },
         //Playerbot mod
-        { "bot",            SEC_PLAYER,         false, &ChatHandler::HandlePlayerbotCommand,           "", NULL },
+        //{ "bot_old",        SEC_PLAYER,         false, NULL,           "", NULL },
+        { "bot",            SEC_PLAYER,         false, NULL,                                           "", playerbotCommandTable },
+        
         { "quit",           SEC_CONSOLE,        true,  &ChatHandler::HandleQuitCommand,                "", NULL },
         { "mmap",           SEC_GAMEMASTER,     false, NULL,                                           "", mmapCommandTable },
 
diff --git a/src/game/Chat.h b/src/game/Chat.h
index b3f5aa3..b6d49f8 100644
--- a/src/game/Chat.h
+++ b/src/game/Chat.h
@@ -585,7 +585,18 @@ class MANGOS_DLL_SPEC ChatHandler
         bool HandleRepairitemsCommand(char* args);
         bool HandleStableCommand(char* args);
         bool HandleWaterwalkCommand(char* args);
+
         bool HandlePlayerbotCommand(char* args);
+        //bool HandlePlayerbotLoginCommand(char* args);
+        bool HandlePlayerbotLoginWithCountCommand(char* args);
+        bool HandlePlayerbotLogoutAllCommand(char* args);
+        //bool HandlePlayerbotEnableAICommand(char* args);
+        bool HandlePlayerbotEnableAIForCountCommand(char* args);
+        bool HandlePlayerbotEnableAIForAllCommand(char* args);
+        //bool HandlePlayerbotDisableAICommand(char* args);
+        bool HandlePlayerbotDisableAIForCountCommand(char* args);
+        bool HandlePlayerbotDisableAIForAllCommand(char* args);
+        
         bool HandleQuitCommand(char* args);
 
         bool HandleMmapPathCommand(char* args);
diff --git a/src/game/Level0.cpp b/src/game/Level0.cpp
index 468c41f..fbfda60 100644
--- a/src/game/Level0.cpp
+++ b/src/game/Level0.cpp
@@ -117,6 +117,7 @@ bool ChatHandler::HandleServerInfoCommand(char* /*args*/)
     PSendSysMessage(LANG_USING_EVENT_AI, sWorld.GetCreatureEventAIVersion());
     PSendSysMessage(LANG_CONNECTED_USERS, activeClientsNum, maxActiveClientsNum, queuedClientsNum, maxQueuedClientsNum);
     PSendSysMessage(LANG_UPTIME, str.c_str());
+    PSendSysMessage("Update time diff: %u", sWorld.GetUpdateTime());
 
     return true;
 }
diff --git a/src/game/ObjectMgr.cpp b/src/game/ObjectMgr.cpp
index 180caf6..3183ecc 100644
--- a/src/game/ObjectMgr.cpp
+++ b/src/game/ObjectMgr.cpp
@@ -6144,6 +6144,23 @@ std::string ObjectMgr::GeneratePetName(uint32 entry)
     return *(list0.begin() + urand(0, list0.size() - 1)) + *(list1.begin() + urand(0, list1.size() - 1));
 }
 
+std::string ObjectMgr::GeneratePlayerName()
+{
+    static char charset[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
+
+    std::string name;
+    int length = 8;
+
+    int l = (int)(sizeof(charset) - 1);
+    for (int i = 0; i < length; i++) {
+        int key = rand() % l;
+        name += charset[key];
+    }
+
+    name[length] = '\0';
+    return name;
+}
+
 void ObjectMgr::LoadCorpses()
 {
     uint32 count = 0;
diff --git a/src/game/ObjectMgr.h b/src/game/ObjectMgr.h
index 212ddc7..5617e1e 100644
--- a/src/game/ObjectMgr.h
+++ b/src/game/ObjectMgr.h
@@ -692,6 +692,7 @@ class ObjectMgr
         void LoadActiveEntities(Map* _map);
 
         std::string GeneratePetName(uint32 entry);
+        std::string GeneratePlayerName();
         uint32 GetBaseXP(uint32 level) const;
         uint32 GetXPForLevel(uint32 level) const;
         uint32 GetXPForPetLevel(uint32 level) const { return GetXPForLevel(level) / 4; }
diff --git a/src/game/PathFinder.cpp b/src/game/PathFinder.cpp
index 523c849..a4953b0 100644
--- a/src/game/PathFinder.cpp
+++ b/src/game/PathFinder.cpp
@@ -122,15 +122,15 @@ dtPolyRef PathFinder::getPolyByLocation(const float* point, float* distance) con
     if (polyRef != INVALID_POLYREF)
         return polyRef;
 
-    // we don't have it in our old path
+    // we don   't have it in our old path
     // try to get it by findNearestPoly()
     // first try with low search box
-    float extents[VERTEX_SIZE] = {3.0f, 5.0f, 3.0f};    // bounds of poly search area
+    float extents[VERTEX_SIZE] = {2.0f, 4.0f, 2.0f};    // bounds of poly search area
     float closestPoint[VERTEX_SIZE] = {0.0f, 0.0f, 0.0f};
     dtStatus dtResult = m_navMeshQuery->findNearestPoly(point, extents, &m_filter, &polyRef, closestPoint);
     if (dtStatusSucceed(dtResult) && polyRef != INVALID_POLYREF)
     {
-        *distance = dtVdist(closestPoint, point);
+        //*distance = dtVdist(closestPoint, point);
         return polyRef;
     }
 
@@ -184,7 +184,7 @@ void PathFinder::BuildPolyPath(const Vector3& startPos, const Vector3& endPos)
     }
 
     // we may need a better number here
-    bool farFromPoly = (distToStartPoly > 7.0f || distToEndPoly > 7.0f);
+    bool farFromPoly = (distToStartPoly > 3.0f || distToEndPoly > 3.0f);
     if (farFromPoly)
     {
         DEBUG_FILTER_LOG(LOG_FILTER_PATHFINDING, "++ BuildPolyPath :: farFromPoly distToStartPoly=%.3f distToEndPoly=%.3f\n", distToStartPoly, distToEndPoly);
@@ -219,7 +219,7 @@ void PathFinder::BuildPolyPath(const Vector3& startPos, const Vector3& endPos)
         {
             float closestPoint[VERTEX_SIZE];
             // we may want to use closestPointOnPolyBoundary instead
-            dtResult = m_navMeshQuery->closestPointOnPoly(endPoly, endPoint, closestPoint, NULL);
+            dtResult = m_navMeshQuery->closestPointOnPolyBoundary(endPoly, endPoint, closestPoint);
             if (dtStatusSucceed(dtResult))
             {
                 dtVcopy(endPoint, closestPoint);
diff --git a/src/game/Player.cpp b/src/game/Player.cpp
index b9f9d94..31f28ba 100644
--- a/src/game/Player.cpp
+++ b/src/game/Player.cpp
@@ -12379,7 +12379,7 @@ void Player::OnGossipSelect(WorldObject* pSource, uint32 gossipListId, uint32 me
                 }
                 delete resultlvl;
 
-                GetPlayerbotMgr()->LoginPlayerBot(ObjectGuid(HIGHGUID_PLAYER,guidlo));
+                GetPlayerbotMgr()->LoginPlayerBot(ObjectGuid(HIGHGUID_PLAYER, guidlo));
                 this->ModifyMoney(-(int32)cost);
             }
             return;
diff --git a/src/game/PlayerDump.cpp b/src/game/PlayerDump.cpp
index f27f14a..14f3e9f 100644
--- a/src/game/PlayerDump.cpp
+++ b/src/game/PlayerDump.cpp
@@ -410,9 +410,9 @@ DumpReturn PlayerDumpReader::LoadDump(const std::string& file, uint32 account, s
     bool nameInvalidated = false;                           // set when name changed or will requested changed at next login
 
     // check character count
-    uint32 charcount = sAccountMgr.GetCharactersCount(account);
+    /*uint32 charcount = sAccountMgr.GetCharactersCount(account);
     if (charcount >= 10)
-        return DUMP_TOO_MANY_CHARS;
+        return DUMP_TOO_MANY_CHARS;*/
 
     FILE* fin = fopen(file.c_str(), "r");
     if (!fin)
@@ -443,7 +443,19 @@ DumpReturn PlayerDumpReader::LoadDump(const std::string& file, uint32 account, s
     if (ObjectMgr::CheckPlayerName(name, true) == CHAR_NAME_SUCCESS)
     {
         CharacterDatabase.escape_string(name);              // for safe, we use name only for sql quearies anyway
+
         result = CharacterDatabase.PQuery("SELECT * FROM characters WHERE name = '%s'", name.c_str());
+
+        while (result)
+        {
+            name = sObjectMgr.GeneratePlayerName();
+
+            if (!normalizePlayerName(name))
+                name.clear();
+
+            result = CharacterDatabase.PQuery("SELECT * FROM characters WHERE name = '%s'", name.c_str());
+        }
+
         if (result)
         {
             name.clear();                                   // use the one from the dump
@@ -552,6 +564,9 @@ DumpReturn PlayerDumpReader::LoadDump(const std::string& file, uint32 account, s
                 if (!changenth(line, 2, chraccount))        // characters.account update
                     ROLLBACK(DUMP_FILE_BROKEN);
 
+                if (!changenth(line, 20, "0"))              // characters.online update
+                    ROLLBACK(DUMP_FILE_BROKEN);
+
                 if (name.empty())
                 {
                     // check if the original name already exists
@@ -561,6 +576,14 @@ DumpReturn PlayerDumpReader::LoadDump(const std::string& file, uint32 account, s
                     result = CharacterDatabase.PQuery("SELECT * FROM characters WHERE name = '%s'", name.c_str());
                     if (result)
                     {
+                        std::string tmpName = sObjectMgr.GeneratePlayerName();
+                        if (normalizePlayerName(tmpName))
+                        {
+                            name = tmpName;
+                            if(!changenth(line, 3, name.c_str()))
+                                ROLLBACK(DUMP_FILE_BROKEN);
+                        }
+                        
                         delete result;
 
                         if (!changenth(line, 36, "1"))      // characters.at_login set to "rename on login"
diff --git a/src/game/World.cpp b/src/game/World.cpp
index 838e82c..bddebf2 100644
--- a/src/game/World.cpp
+++ b/src/game/World.cpp
@@ -98,6 +98,8 @@ World::World()
     m_maxQueuedSessionCount = 0;
     m_NextDailyQuestReset = 0;
 
+    m_updateTime = 0;
+
     m_defaultDbcLocale = LOCALE_enUS;
     m_availableDbcLocaleMask = 0;
 
@@ -1369,6 +1371,8 @@ void World::DetectDBCLang()
 /// Update the World !
 void World::Update(uint32 diff)
 {
+    m_updateTime = uint32(diff);
+    
     ///- Update the different timers
     for (int i = 0; i < WUPDATE_COUNT; ++i)
     {
diff --git a/src/game/World.h b/src/game/World.h
index 268a1c7..c05a4e1 100644
--- a/src/game/World.h
+++ b/src/game/World.h
@@ -482,6 +482,8 @@ class World
         time_t const& GetGameTime() const { return m_gameTime; }
         /// Uptime (in secs)
         uint32 GetUptime() const { return uint32(m_gameTime - m_startTime); }
+        /// Update time (in miliseconds)
+        uint32 GetUpdateTime() const { return m_updateTime; }
         /// Next daily quests reset time
         time_t GetNextDailyQuestsResetTime() const { return m_NextDailyQuestReset; }
 
@@ -572,6 +574,7 @@ class World
         void LoadDBVersion();
         char const* GetDBVersion() { return m_DBVersion.c_str(); }
         char const* GetCreatureEventAIVersion() { return m_CreatureEventAIVersion.c_str(); }
+        
 
 
         /**
@@ -621,6 +624,8 @@ class World
         uint32 mail_timer;
         uint32 mail_timer_expires;
 
+        uint32 m_updateTime;
+
         typedef UNORDERED_MAP<uint32, WorldSession*> SessionMap;
         SessionMap m_sessions;
         uint32 m_maxActiveSessionCount;
diff --git a/src/game/playerbot/PlayerbotAI.cpp b/src/game/playerbot/PlayerbotAI.cpp
index b4d53af..b587a95 100644
--- a/src/game/playerbot/PlayerbotAI.cpp
+++ b/src/game/playerbot/PlayerbotAI.cpp
@@ -19,6 +19,7 @@
 #include "PlayerbotShamanAI.h"
 #include "PlayerbotWarlockAI.h"
 #include "PlayerbotWarriorAI.h"
+#include "PlayerbotGenericAI.h"
 #include "../Player.h"
 #include "../ObjectMgr.h"
 #include "WorldPacket.h"
@@ -63,7 +64,7 @@ public:
 };
 
 PlayerbotAI::PlayerbotAI(PlayerbotMgr* const mgr, Player* const bot) :
-m_mgr(mgr), m_bot(bot), m_classAI(0), m_ignoreAIUpdatesUntilTime(CurrentTime()),
+m_mgr(mgr), m_bot(bot), m_classAI(0), m_aiEnabled(false), m_ignoreAIUpdatesUntilTime(CurrentTime()),
 m_combatOrder(ORDERS_NONE), m_ScenarioType(SCENARIO_PVE),
 m_TimeDoneEating(0), m_TimeDoneDrinking(0),
 m_CurrentlyCastingSpellId(0), m_CraftSpellId(0), m_spellIdCommand(0),
@@ -75,6 +76,8 @@ m_bDebugCommandChat(false)
     // set bot state
     m_botState = BOTSTATE_NORMAL;
 
+    m_aiEnabled = false;
+
     // reset some pointers
     m_targetChanged = false;
     m_targetType = TARGET_NORMAL;
@@ -108,7 +111,7 @@ m_bDebugCommandChat(false)
     IsUpOrDown = 0;
     gTempDist = 0.5f;
     gTempDist2 = 1.0f;
-    SetMovementOrder(MOVEMENT_FOLLOW, GetMaster());
+    SetMovementOrder(MOVEMENT_STAY, GetMaster());
     BotDataRestore();
     m_DelayAttackInit = CurrentTime();
 
@@ -1367,7 +1370,11 @@ bool PlayerbotAI::IsItemUseful(uint32 itemid)
 
 void PlayerbotAI::ReloadAI()
 {
-    switch (m_bot->getClass())
+    if (m_classAI)
+        delete m_classAI;
+    m_combatStyle = COMBAT_MELEE;
+    m_classAI = (PlayerbotClassAI*) new PlayerbotGenericAI(GetMaster(), m_bot, this);
+    /*switch (m_bot->getClass())
     {
         case CLASS_PRIEST:
             if (m_classAI) delete m_classAI;
@@ -1414,7 +1421,7 @@ void PlayerbotAI::ReloadAI()
             m_combatStyle = COMBAT_RANGED;
             m_classAI = (PlayerbotClassAI *) new PlayerbotHunterAI(GetMaster(), m_bot, this);
             break;
-    }
+    }*/
 
     HERB_GATHERING      = initSpell(HERB_GATHERING_1);
     MINING              = initSpell(MINING_1);
@@ -3941,8 +3948,8 @@ void PlayerbotAI::BotDataRestore()
 
     if (!result)
     {
-        sLog.outString();
-        sLog.outString(">> [BotDataRestore()] Loaded `playerbot_saved_data`, found no match for guid %u.", m_bot->GetGUIDLow());
+        //sLog.outString();
+        //sLog.outString(">> [BotDataRestore()] Loaded `playerbot_saved_data`, found no match for guid %u.", m_bot->GetGUIDLow());
         m_DelayAttack = 0;
         return;
     }
@@ -3965,8 +3972,8 @@ void PlayerbotAI::CombatOrderRestore()
 
     if (!result)
     {
-        sLog.outString();
-        sLog.outString(">> [CombatOrderRestore()] Loaded `playerbot_saved_data`, found no match for guid %u.", m_bot->GetGUIDLow());
+        //sLog.outString();
+        //sLog.outString(">> [CombatOrderRestore()] Loaded `playerbot_saved_data`, found no match for guid %u.", m_bot->GetGUIDLow());
         TellMaster("I have no orders");
         return;
     }
@@ -4461,9 +4468,14 @@ void PlayerbotAI::UpdateAI(const uint32 /*p_time*/)
     if (CurrentTime() < m_ignoreAIUpdatesUntilTime)
         return;
 
-    // default updates occur every two seconds
-    SetIgnoreUpdateTime(2);
+    //default updates occur every two seconds
+    //SetIgnoreUpdateTime(0);
 
+    if (!m_aiEnabled)
+    {
+        return;
+    }
+    
     if (m_FollowAutoGo == FOLLOWAUTOGO_INIT)
     {
         if (m_combatOrder & ORDERS_TANK)
@@ -4708,9 +4720,9 @@ void PlayerbotAI::UpdateAI(const uint32 /*p_time*/)
         return;
     }
 
-    // if commanded to follow master and not already following master then follow master
-    if (!m_bot->isInCombat() && !IsMoving())
-        return MovementReset();
+    //// if commanded to follow master and not already following master then follow master
+    //if (!m_bot->isInCombat() && !IsMoving())
+    //    return MovementReset();
 
     // do class specific non combat actions
     if (GetClassAI() && !m_bot->IsMounted())
@@ -4779,8 +4791,8 @@ bool PlayerbotAI::In_Range(Unit* Target, uint32 spellId)
     if (!TempRange)
         return false;
 
-    if (TempRange->minRange == (TempRange->maxRange == 0.0f))
-        return true;
+    //if (TempRange->minRange == (TempRange->maxRange == 0.0f))
+    //    return true;
 
     //Unit is out of range of this spell
     if (!m_bot->IsInRange(Target, TempRange->minRange, TempRange->maxRange))
diff --git a/src/game/playerbot/PlayerbotAI.h b/src/game/playerbot/PlayerbotAI.h
index ed5b36c..ad0d272 100644
--- a/src/game/playerbot/PlayerbotAI.h
+++ b/src/game/playerbot/PlayerbotAI.h
@@ -93,6 +93,18 @@ enum m_FollowAutoGo
 class MANGOS_DLL_SPEC PlayerbotAI
 {
 public:
+    enum BotState
+    {
+        BOTSTATE_NORMAL,            // normal AI routines are processed
+        BOTSTATE_COMBAT,            // bot is in combat
+        BOTSTATE_DEAD,              // we are dead and wait for becoming ghost
+        BOTSTATE_DEADRELEASED,      // we released as ghost and wait to revive
+        BOTSTATE_LOOTING,           // looting mode, used just after combat
+        BOTSTATE_FLYING,            // bot is flying
+        BOTSTATE_TAME,              // bot hunter taming
+        BOTSTATE_DELAYED            // bot delay action
+    };
+    
     enum ScenarioType
     {
         SCENARIO_PVE,
@@ -143,18 +155,6 @@ public:
         TARGET_THREATEN             = 0x01
     };
 
-    enum BotState
-    {
-        BOTSTATE_NORMAL,            // normal AI routines are processed
-        BOTSTATE_COMBAT,            // bot is in combat
-        BOTSTATE_DEAD,              // we are dead and wait for becoming ghost
-        BOTSTATE_DEADRELEASED,      // we released as ghost and wait to revive
-        BOTSTATE_LOOTING,           // looting mode, used just after combat
-        BOTSTATE_FLYING,            // bot is flying
-        BOTSTATE_TAME,              // bot hunter taming
-        BOTSTATE_DELAYED            // bot delay action
-    };
-
     enum CollectionFlags
     {
         COLLECT_FLAG_NOTHING    = 0x00,     // skip looting of anything
@@ -281,6 +281,9 @@ public:
     PlayerbotClassAI* GetClassAI() { return m_classAI; }
     PlayerbotMgr* GetManager() { return m_mgr; }
     void ReloadAI();
+    void Enable() { m_aiEnabled = true; }
+    void Disable() { m_aiEnabled = false; }
+    bool IsEnabled() { return m_aiEnabled; }
 
     // finds spell ID for matching substring args
     // in priority of full text match, spells not taking reagents, and highest rank
@@ -407,6 +410,8 @@ public:
     Unit *gSectarget;
     uint32 gQuestFetch;
 
+    bool m_aiEnabled;
+
     bool m_AutoEquipToggle;             //switch for autoequip
     uint32 SellWhite;                   //switch for white item auto sell
     uint8 DistOverRide;
diff --git a/src/game/playerbot/PlayerbotGenericAI.cpp b/src/game/playerbot/PlayerbotGenericAI.cpp
new file mode 100644
index 0000000..8066fae
--- /dev/null
+++ b/src/game/playerbot/PlayerbotGenericAI.cpp
@@ -0,0 +1,85 @@
+
+#include "PlayerbotGenericAI.h"
+#include "PathFinder.h"
+#include "../movement/MoveSplineInit.h"
+
+class PlayerbotAI;
+
+PlayerbotGenericAI::PlayerbotGenericAI(Player * const master, Player * const bot, PlayerbotAI * const ai) : PlayerbotClassAI(master, bot, ai), m_path(NULL)
+{
+    m_path = new PathFinder(bot);
+}
+
+PlayerbotGenericAI::~PlayerbotGenericAI() 
+{
+    delete m_path;
+}
+
+void PlayerbotGenericAI::DoNonCombatActions()
+{
+    MoveToRandomPoint();
+}
+
+void PlayerbotGenericAI::DoNextCombatManeuver(Unit* pTarget)
+{
+
+}
+
+void PlayerbotGenericAI::MoveToRandomPoint()
+{   
+    Player* bot = GetPlayerBot();
+    
+    if (!bot)
+        return;
+
+    if (bot->isMoving())
+        return;
+
+    //bot->GetPlayerbotAI()->SetIgnoreUpdateTime(3);
+
+    Movement::MoveSplineInit init(*bot);
+
+    if (!m_path)
+        m_path = new PathFinder(bot);
+
+    Position pos;
+    bot->GetClosePoint(pos.x, pos.y, pos.z, bot->GetObjectBoundingRadius(), 10.f, frand(0, M_PI_F * 2));
+    
+    //Creature* marker = bot->SummonCreature(13838, pos.x, pos.y, pos.z, 0, TEMPSUMMON_TIMED_DESPAWN, 9000);
+    
+    m_path->calculate(pos.x, pos.y, pos.z);
+
+    Position endPos = Position(m_path->getActualEndPosition().x, m_path->getActualEndPosition().y, m_path->getActualEndPosition().z, 0);
+    
+    if (m_path->getPathType() & PATHFIND_NOPATH)
+    {
+        //bot->MonsterSay("PATHFIND_NOPATH", 0);
+        return;
+    }
+    else if (m_path->getPathType() & PATHFIND_INCOMPLETE)
+    {
+        //bot->MonsterSay("PATHFIND_INCOMPLETE", 0);
+
+        init.MovebyPath(m_path->getPath());
+        init.Launch();
+        init.SetWalk(true);
+
+        return;
+    }
+    else if (m_path->getPathType() & PATHFIND_SHORTCUT)
+    {
+        //bot->MonsterSay("PATHFIND_SHORTCUT", 0);
+        return;
+    }
+    else if (m_path->getPathType() & PATHFIND_NORMAL)
+    {
+        //bot->MonsterSay("PATHFIND_NORMAL", 0);
+        
+        init.MovebyPath(m_path->getPath());
+        init.Launch();
+        init.SetWalk(true);
+
+        return;
+    }
+
+}
\ No newline at end of file
diff --git a/src/game/playerbot/PlayerbotGenericAI.h b/src/game/playerbot/PlayerbotGenericAI.h
new file mode 100644
index 0000000..b860b8b
--- /dev/null
+++ b/src/game/playerbot/PlayerbotGenericAI.h
@@ -0,0 +1,26 @@
+#ifndef _PLAYERBOTGENERICAI_H
+#define _PLAYERBOTGENERICAI_H
+
+#include "PlayerbotClassAI.h"
+
+class PathFinder;
+
+class MANGOS_DLL_SPEC PlayerbotGenericAI : PlayerbotClassAI
+{
+public:
+    PlayerbotGenericAI(Player * const master, Player * const bot, PlayerbotAI * const ai);
+    virtual ~PlayerbotGenericAI();
+
+    void DoNonCombatActions();
+
+    void DoNextCombatManeuver(Unit*);
+
+private:
+    void MoveToRandomPoint();
+    
+    PathFinder* m_path;
+
+};
+
+#endif
+
diff --git a/src/game/playerbot/PlayerbotMgr.cpp b/src/game/playerbot/PlayerbotMgr.cpp
index e1888fd..d3bfd42 100644
--- a/src/game/playerbot/PlayerbotMgr.cpp
+++ b/src/game/playerbot/PlayerbotMgr.cpp
@@ -11,6 +11,7 @@
 #include "../Language.h"
 #include "../WaypointMovementGenerator.h"
 #include "../Guild.h"
+#include "../PlayerDump.h"
 
 class LoginQueryHolder;
 class CharacterHandler;
@@ -856,6 +857,114 @@ void PlayerbotMgr::Stay()
     }
 }
 
+bool PlayerbotMgr::EnableAI(ObjectGuid botGuid, bool disable = false)
+{
+    PlayerBotMap::const_iterator itr = m_playerBots.find(botGuid);
+    if (itr == m_playerBots.end())
+    {
+        if (!disable)
+            itr->second->GetPlayerbotAI()->Enable();
+        else
+            itr->second->GetPlayerbotAI()->Disable();
+    }
+
+    return true;
+}
+
+bool PlayerbotMgr::EnableAI(uint32 count, bool disable = false)
+{
+    if (!GetMaster() || m_playerBots.empty())
+        return false;
+    
+    if (count == 0)
+        return false;
+    else
+    {
+        uint32 tmpCount = 0;
+        for (PlayerBotMap::const_iterator itr = GetPlayerBotsBegin(); itr != GetPlayerBotsEnd(); ++itr)
+        {
+            if (tmpCount > count)
+                break;
+
+            Player* const bot = itr->second;
+
+            if (!bot)
+                return false;
+
+            PlayerbotAI* const ai = bot->GetPlayerbotAI();
+
+            if (!ai)
+                return false;
+
+            if (!disable)
+            {
+                if (!ai->IsEnabled())
+                    ai->Enable();
+            }
+            else
+            {
+                if (ai->IsEnabled())
+                {
+                    ai->Disable();
+                    bot->GetMotionMaster()->Clear();
+                }
+            }
+
+            ++tmpCount;
+        }
+        return true;
+    }
+}
+
+bool PlayerbotMgr::DisableAI(uint32 count)
+{
+    return EnableAI(count, true);
+}
+
+bool PlayerbotMgr::DisableAI(ObjectGuid botGuid)
+{
+    return EnableAI(botGuid, true);
+}
+
+bool PlayerbotMgr::EnableAIForAll(bool disable = false)
+{
+    if (!GetMaster() || m_playerBots.empty())
+        return false;
+
+    for (PlayerBotMap::const_iterator itr = GetPlayerBotsBegin(); itr != GetPlayerBotsEnd(); ++itr)
+    {
+        Player* const bot = itr->second;
+
+        if (!bot)
+            return false;
+
+        PlayerbotAI* const ai = bot->GetPlayerbotAI();
+
+        if (!ai)
+            return false;
+
+        if (!disable)
+        {
+            if (!ai->IsEnabled())
+                ai->Enable();
+        }
+        else
+        {
+            if (ai->IsEnabled())
+            {
+                ai->Disable();
+                bot->GetMotionMaster()->Clear();
+            }
+        }
+        
+    }
+    return true;
+}
+
+bool PlayerbotMgr::DisableAIForAll()
+{
+    return EnableAIForAll(true);
+}
 
 // Playerbot mod: logs out a Playerbot.
 void PlayerbotMgr::LogoutPlayerBot(ObjectGuid guid)
@@ -882,7 +991,7 @@ void PlayerbotMgr::OnBotLogin(Player * const bot)
     // give the bot some AI, object is owned by the player class
     PlayerbotAI* ai = new PlayerbotAI(this, bot);
     bot->SetPlayerbotAI(ai);
-
+    
     // tell the world session that they now manage this new bot
     m_playerBots[bot->GetObjectGuid()] = bot;
 
@@ -1151,7 +1260,7 @@ bool ChatHandler::HandlePlayerbotCommand(char* args)
                 SetSentErrorMessage(true);
                 return false;
             }
-            CharacterDatabase.DirectPExecute("UPDATE characters SET online = 1 WHERE guid = '%u'", guid.GetCounter());
+            CharacterDatabase.DirectPExecute("UPDATE characters SET online = '1' WHERE guid = '%u'", guid.GetCounter());
             mgr->LoginPlayerBot(guid);
             PSendSysMessage("Bot added successfully.");
         }
@@ -1163,10 +1272,286 @@ bool ChatHandler::HandlePlayerbotCommand(char* args)
                 SetSentErrorMessage(true);
                 return false;
             }
-            CharacterDatabase.DirectPExecute("UPDATE characters SET online = 0 WHERE guid = '%u'", guid.GetCounter());
+            CharacterDatabase.DirectPExecute("UPDATE characters SET online = '0' WHERE guid = '%u'", guid.GetCounter());
             mgr->LogoutPlayerBot(guid);
             PSendSysMessage("Bot removed successfully.");
         }
 
         return true;
 }
+
+bool ChatHandler::HandlePlayerbotLoginWithCountCommand(char* args)
+{   
+    uint32 plCount;
+
+    if (!*args)
+        plCount = 1;
+    else
+    {
+        int32 plCount_int;
+
+        if (!ExtractInt32(&args, plCount_int))
+        {
+            return false;
+        }
+
+        if (plCount_int <= 0)
+        {
+            return false;
+        }
+
+        plCount = plCount_int;
+    }
+
+    PlayerbotMgr* mgr = m_session->GetPlayer()->GetPlayerbotMgr();
+    
+    if (!mgr)
+    {
+        mgr = new PlayerbotMgr(m_session->GetPlayer());
+        m_session->GetPlayer()->SetPlayerbotMgr(mgr);
+    }
+    
+    GuidList plGuidList;
+    
+    const uint32 masterGuid = m_session->GetPlayer()->GetObjectGuid().GetCounter();
+    
+    QueryResult *result = 
+        CharacterDatabase.PQuery("SELECT guid FROM characters WHERE online = '0' AND guid != '%u' LIMIT %u",
+        masterGuid,
+        plCount);
+   
+    if (!result)
+    {
+        PSendSysMessage("Playerbot: error - not found free characters");
+        return true;
+    }
+
+    do
+    {
+        Field* fields = result->Fetch();
+        if (!fields)
+            break;
+
+        plGuidList.push_back(ObjectGuid(HIGHGUID_PLAYER, fields[0].GetUInt32()));
+
+    } while (result->NextRow());
+   
+    delete result;
+
+    if (!plGuidList.empty())
+    {
+        for (GuidList::iterator itr = plGuidList.begin(); itr != plGuidList.end(); ++itr)
+        {
+            mgr->LoginPlayerBot(*itr);
+        }
+    }
+    else 
+    {
+        PSendSysMessage("Playerbot: error - not found free characters");
+        return true;
+    }
+
+    if (plCount > plGuidList.size())
+    {
+        plCount = plGuidList.size();
+        PSendSysMessage("Playerbot: found %u free characters", plCount);
+    }
+
+    plGuidList.clear();
+
+    PSendSysMessage("Playerbot: logged in %u bots", plCount);
+    return true;
+}
+
+bool ChatHandler::HandlePlayerbotLogoutAllCommand(char* args)
+{
+    PlayerbotMgr* mgr = m_session->GetPlayer()->GetPlayerbotMgr();
+    
+    if (!mgr)
+    {
+        mgr = new PlayerbotMgr(m_session->GetPlayer());
+        m_session->GetPlayer()->SetPlayerbotMgr(mgr);
+    }
+    
+    uint32 plCount;
+    
+    if (!*args)
+    {
+        mgr->LogoutAllBots();
+        PSendSysMessage("Playerbot: logged out all bots");
+        return true;
+    }
+    else
+    {
+        int32 plCount_int;
+
+        if (!ExtractInt32(&args, plCount_int))
+        {
+            return false;
+        }
+
+        if (plCount_int <= 0 || plCount_int > sConfig.GetIntDefault("PlayerLimit", 100))
+        {
+            return false;
+        }
+
+        plCount = plCount_int;
+    }
+
+    GuidList plGuidList;
+
+    const uint32 masterGuid = m_session->GetPlayer()->GetObjectGuid().GetCounter();
+    
+    QueryResult *result =
+        CharacterDatabase.PQuery("SELECT guid FROM characters WHERE online = '1' AND guid !='%u' LIMIT %u",
+        masterGuid,
+        plCount);
+    
+    if (!result)
+    {
+        PSendSysMessage("Playerbot: error - not found free characters");
+        return true;
+    }
+    do
+    {
+        Field* fields = result->Fetch();
+        if (!fields)
+            break;
+
+        plGuidList.push_back(ObjectGuid(HIGHGUID_PLAYER, fields[0].GetUInt32()));
+
+    } while (result->NextRow());
+    
+    delete result;
+
+    if (!plGuidList.empty())
+    {
+        for (GuidList::iterator itr = plGuidList.begin(); itr != plGuidList.end(); ++itr)
+        {
+            Player* bot = mgr->GetPlayerBot(*itr);
+            
+            if (bot)
+            {
+                mgr->LogoutPlayerBot(*itr);
+                Player::DeleteFromDB(*itr, mgr->GetMaster()->GetSession()->GetAccountId(), true, true);
+            }
+        }
+    }
+    else
+    {
+        PSendSysMessage("Playerbot: error - not found free characters");
+
+        return true;
+    }
+
+    if (plCount > plGuidList.size())
+    {
+        plCount = plGuidList.size();
+        PSendSysMessage("Playerbot: warning - only have %u free characters", plCount);
+    }
+
+    plGuidList.clear();
+
+    PSendSysMessage("Playerbot: logout %u bots", plCount);
+    return true;
+}
+
+bool ChatHandler::HandlePlayerbotEnableAIForCountCommand(char* args)
+{
+    PlayerbotMgr* mgr = m_session->GetPlayer()->GetPlayerbotMgr();
+
+    if (!mgr)
+    {
+        mgr = new PlayerbotMgr(m_session->GetPlayer());
+        m_session->GetPlayer()->SetPlayerbotMgr(mgr);
+    }
+
+    if (!*args)
+    {
+        return false;
+    }
+    else
+    {
+
+        uint32 botCount;
+        if (!ExtractUInt32(&args, botCount))
+        {
+            return false;
+        }
+
+        if (mgr->EnableAI(botCount))
+            PSendSysMessage("Playerbot: AI was enabled for %u bots", botCount);
+        else
+            PSendSysMessage("Playerbot: error - AI can't be enabled");
+    }
+
+    return true;
+}
+
+bool ChatHandler::HandlePlayerbotEnableAIForAllCommand(char* args)
+{
+    PlayerbotMgr* mgr = m_session->GetPlayer()->GetPlayerbotMgr();
+
+    if (!mgr)
+    {
+        mgr = new PlayerbotMgr(m_session->GetPlayer());
+        m_session->GetPlayer()->SetPlayerbotMgr(mgr);
+    }
+    
+    if (mgr->EnableAIForAll())
+        PSendSysMessage("Playerbot: AI was enabled for all");
+    else
+        PSendSysMessage("Playerbot: error - AI can't be enabled");
+    
+    return true;
+}
+
+bool ChatHandler::HandlePlayerbotDisableAIForCountCommand(char* args)
+{
+    PlayerbotMgr* mgr = m_session->GetPlayer()->GetPlayerbotMgr();
+
+    if (!mgr)
+    {
+        mgr = new PlayerbotMgr(m_session->GetPlayer());
+        m_session->GetPlayer()->SetPlayerbotMgr(mgr);
+    }
+
+    if (!*args)
+    {
+        return false;
+    }
+    else
+    {
+
+        uint32 botCount;
+        if (!ExtractUInt32(&args, botCount))
+        {
+            return false;
+        }
+
+        if (mgr->DisableAI(botCount))
+            PSendSysMessage("Playerbot: AI was disabled for %u bots", botCount);
+        else
+            PSendSysMessage("Playerbot: error - AI can't be disabled");
+    }
+
+    return true;
+}
+
+bool ChatHandler::HandlePlayerbotDisableAIForAllCommand(char* args)
+{
+    PlayerbotMgr* mgr = m_session->GetPlayer()->GetPlayerbotMgr();
+
+    if (!mgr)
+    {
+        mgr = new PlayerbotMgr(m_session->GetPlayer());
+        m_session->GetPlayer()->SetPlayerbotMgr(mgr);
+    }
+
+    if (mgr->DisableAIForAll())
+        PSendSysMessage("Playerbot: AI was disabled for all");
+    else
+        PSendSysMessage("Playerbot: error - AI can't be disabled for all");
+
+    return true;
+}
diff --git a/src/game/playerbot/PlayerbotMgr.h b/src/game/playerbot/PlayerbotMgr.h
index 1f3798e..9840ba4 100644
--- a/src/game/playerbot/PlayerbotMgr.h
+++ b/src/game/playerbot/PlayerbotMgr.h
@@ -11,6 +11,12 @@ class Item;
 
 typedef UNORDERED_MAP<ObjectGuid, Player*> PlayerBotMap;
 
+enum PlayerbotAIState
+{
+    AI_STATE_DISABLED,
+    AI_STATE_ENABLED,
+};
+
 class MANGOS_DLL_SPEC PlayerbotMgr
 {
     // static functions, available without a PlayerbotMgr instance
@@ -45,6 +51,14 @@ public:
     void OnBotLogin(Player * const bot);
     void Stay();
 
+    bool EnableAI(ObjectGuid botGuid, bool /*disable*/);
+    bool EnableAI(uint32 count, bool /*disable*/);
+    bool EnableAIForAll(bool /*disable*/);
+
+    bool DisableAI(ObjectGuid botGuid);
+    bool DisableAI(uint32 count);
+    bool DisableAIForAll();
+
 public:
     // config variables
     uint32 m_confRestrictBotLevel;
diff --git a/win/VC120/game.vcxproj b/win/VC120/game.vcxproj
index 6b773fc..a1526dd 100644
--- a/win/VC120/game.vcxproj
+++ b/win/VC120/game.vcxproj
@@ -450,6 +450,7 @@
     <ClCompile Include="..\..\src\game\playerbot\PlayerbotAI.cpp" />
     <ClCompile Include="..\..\src\game\playerbot\PlayerbotClassAI.cpp" />
     <ClCompile Include="..\..\src\game\playerbot\PlayerbotDruidAI.cpp" />
+    <ClCompile Include="..\..\src\game\playerbot\PlayerbotGenericAI.cpp" />
     <ClCompile Include="..\..\src\game\playerbot\PlayerbotHunterAI.cpp" />
     <ClCompile Include="..\..\src\game\playerbot\PlayerbotMageAI.cpp" />
     <ClCompile Include="..\..\src\game\playerbot\PlayerbotMgr.cpp" />
@@ -623,6 +624,7 @@
     <ClInclude Include="..\..\src\game\playerbot\PlayerbotAI.h" />
     <ClInclude Include="..\..\src\game\playerbot\PlayerbotClassAI.h" />
     <ClInclude Include="..\..\src\game\playerbot\PlayerbotDruidAI.h" />
+    <ClInclude Include="..\..\src\game\playerbot\PlayerbotGenericAI.h" />
     <ClInclude Include="..\..\src\game\playerbot\PlayerbotHunterAI.h" />
     <ClInclude Include="..\..\src\game\playerbot\PlayerbotMageAI.h" />
     <ClInclude Include="..\..\src\game\playerbot\PlayerbotMgr.h" />
diff --git a/win/VC120/game.vcxproj.filters b/win/VC120/game.vcxproj.filters
index 61fe100..cfbb565 100644
--- a/win/VC120/game.vcxproj.filters
+++ b/win/VC120/game.vcxproj.filters
@@ -562,6 +562,9 @@
     <ClCompile Include="..\..\src\game\BattleGround\BattleGroundWS.cpp">
       <Filter>BattleGround</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\game\playerbot\PlayerbotGenericAI.cpp">
+      <Filter>World/Handlers</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="..\..\src\game\AccountMgr.h">
@@ -1075,5 +1078,8 @@
     <ClInclude Include="..\..\src\game\BattleGround\BattleGroundWS.h">
       <Filter>BattleGround</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\game\playerbot\PlayerbotGenericAI.h">
+      <Filter>World/Handlers</Filter>
+    </ClInclude>
   </ItemGroup>
-</Project>
+</Project>
\ No newline at end of file