-module (server_udp).
-export ([start/0, client/1]).

start() ->
	spawn(fun() -> server(4000) end).

server(Port) ->
	{ok, Socket} = gen_udp:open(Port, [binary, {active,  false}]),
	io:format("server opened socket: ~p~n", [Socket]),
	loop(Socket).

loop(Socket) ->
	inet:setopts(Socket, [{active, once}]),
	receive
		{udp, Socket, Host, Port, Bin} ->
			io:format("server received: ~p~n", [Bin]),			
			Answer = parse(Bin),
			gen_udp:send(Socket, Host, Port, Answer),
			io:format("server answered: ~p~n", [Answer]),
			loop(Socket)
	end.

parse(Bin) ->
	Str = binary:bin_to_list(Bin),
	[Func | Args] = string:tokens(Str, ", "),
	case Func of
		"sum" ->
			server_math:sum(Args);
		"sub" ->
			server_math:sub(Args);
		"mtp" ->
			server_math:mtp(Args);
		"dvd" ->
			server_math:dvd(Args);
		_Else ->
			<<"Sorry, but smth went terribly wrong">>
	end.
% Client code (for testing only)

client(N) ->
	{ok, Socket} = gen_udp:open(0, [binary]),
	io:format("Client opened socket: ~p~n", [Socket]),
	ok = gen_udp:send(Socket, "localhost", 4000, N),
	Value = receive
		{udp, Socket, _, _, Bin} ->
			io:format("Client received: ~p~n", [Bin])
		after 2000 ->
			0
		end,
	gen_udp:close(Socket),
	Value.