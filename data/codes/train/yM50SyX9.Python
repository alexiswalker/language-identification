#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import argparse
import codecs
import itertools

"""
My über secure encryption script!
"""


def xor(text, key1, key2):
    key1 = key1 * (len(text)//len(key1) + 1)
    key2 = key2 * (len(text)//len(key2) + 1)

    res = ""
    for i in range(len(text)):
        #print(ord(key1[i])^ord(key2[i]))
        res += chr(ord(text[i]) ^ ord(key1[i]) ^ ord(key2[i]))
    return res

def encrypt(input_data, password1, password2):
    return xor(input_data, password1, password2)

def decrypt(input_data, password1, password2):
    # This is XOR encryption, so decryption is just the same
    return xor(input_data, password1, password2)


def main():
    parser = argparse.ArgumentParser("My über secure encryption script!")

    parser.add_argument("action", choices=["encrypt", "decrypt"])
    parser.add_argument("file", help="The input file")
    parser.add_argument("outfile", help="The output file")
    parser.add_argument("password1", help="The first encryption password")
    parser.add_argument("password2", help="The second encryption password")

    opts = parser.parse_args()

    with codecs.open(opts.file, 'r', "utf-8") as in_file:
        input_data = in_file.read()
    result_data = ""

    if opts.action == "encrypt":
        result_data = encrypt(input_data, opts.password1, opts.password2)
    elif opts.action == "decrypt":
        result_data = decrypt(input_data, opts.password1, opts.password2)

    with codecs.open(opts.outfile, 'w', "utf-8") as out_file:
        out_file.write(result_data)

#main()

sample="encrypted3"

with codecs.open(sample, 'r', "utf-8") as in_file:
    cipher = in_file.read()


Integers=[i for i in range(128)]

charset="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ,;.()\":!?-@'\t\n'$^[]{}#"


maxlen=9000
assert maxlen<len(cipher)

#Valid[i] contains all the integers j such that chr(cipher[i] ^ j) soit dans le charset
valid=list()

for i in range(maxlen):
    cur=list()
    for j in Integers:
        if chr(ord(cipher[i]) ^ j) in charset:
            cur.append(j)

    valid.append(cur)

#On devine la taille de la clé par iteration
key_size_min=2
key_size_max=10
guess=[None]*key_size_max
for i in range(key_size_min,key_size_max):    
    cur=[None]*i
    for tmp in range(i):
        cur[tmp]=valid[tmp]
        #print(cur)
        #input()
    for j in range(i,maxlen):
        cur[j%i]=[v for v in cur[j%i] if v in valid[j]]
        #print(j)
        #print(valid[j])
        #print(cur[j%i])
        #input()
    
    guess[i]=cur

#niceguess filter the possibles size of the keys. If the size of the password are relatively primes, there is only one result, otherwise it depends
#b is an approximation since the charset is not complete
niceguess=list()
index=0
for i in guess:
    if i!=None:
        b=0
        for j in i:
            if j==[]:
                b+=1

        if b<5:
            print("Possible size of the key : "+str(index))
            niceguess.append(i)
    index+=1
#print(valid)
#print(guess[61])
print(niceguess)    

size=input("Enter the size of the key")
size=int(size)
for j in range(len(cipher)):
        if len(niceguess[size-1-key_size_min][j%size])==1:
            print(chr(ord(cipher[j])^niceguess[3][j%6][0]),end="")
#        elif niceguess[3][j%63]==[5,7]:
#            print(chr(ord(cipher[j])^7),end="")
#        elif niceguess[3][j%63]==[105,107]:
#            print(chr(ord(cipher[j])^105),end="")
#        elif niceguess[3][j%63]==[17,22]:
#            print(chr(ord(cipher[j])^22),end="")
#        elif niceguess[3][j%63]==[5,6]:
#            print(chr(ord(cipher[j])^5),end="")
#        elif niceguess[3][j%63]==[120,122]:
#            print(chr(ord(cipher[j])^120),end="")
#        elif niceguess[3][j%63]==[24,26]:
#            print(chr(ord(cipher[j])^24),end="")
#        elif niceguess[3][j%63]==[112,114]:
#            print(chr(ord(cipher[j])^112),end="")
#        else:        
#            print("{", end="")
#            for k in niceguess[3][j%63]:
#                print(chr(ord(cipher[j])^k)+":"+str(k),end=",")
#            print("}", end="")