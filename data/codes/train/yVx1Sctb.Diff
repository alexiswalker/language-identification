# HG changeset patch
# User Clanat <сlanat@bitbucket.org>
# Date 1399205944 -21600
# Branch trunk
# Node ID 21eabc2fb4f95de6fcb0d599560246e1af1c304b
# Parent  81bfa4b1e2bad2f2f313238527c59230389be473
Prayer of Mending - correction

diff --git a/.hgignore b/.hgignore
--- a/.hgignore
+++ b/.hgignore
@@ -9,6 +9,7 @@
 .git/
 *~
 *.orig
+*.autosave
 *.rej
 *.ncb
 *.sdf
@@ -25,4 +26,4 @@
 win/VC1*0/*/*
 win/_*/
 
-src/shared/revision.h
\ No newline at end of file
+src/shared/revision.h
diff --git a/src/game/Unit.cpp b/src/game/Unit.cpp
--- a/src/game/Unit.cpp
+++ b/src/game/Unit.cpp
@@ -12409,7 +12409,7 @@
 
             PlayerCaster->ApplySpellMod(spellProto->Id, SPELLMOD_RADIUS, radius,NULL);
 
-            if (Unit* target = GetMostDamagedRaidMember(radius, false, true, PlayerCaster))
+            if (Unit* target = GetNextPoMTarget(radius, caster->SpellHealingBonus(spellProto, heal, HEAL, this)))
             {
                 // aura will applied from caster, but spell casted from current aura holder
                 SpellModifier *mod = new SpellModifier;
@@ -13694,7 +13694,7 @@
     return nearMembers[randTarget];
 }
 
-Unit* Unit::GetMostDamagedRaidMember(float radius, bool PlayerOnly, bool ExtraSrc, Unit const* source)
+Unit* Unit::GetNextPoMTarget(float radius, int32 heal, bool PlayerOnly)
 {
     Player *pPlayer = GetCharmerOrOwnerPlayerOrPlayerItself();
     if (!pPlayer)
@@ -13713,22 +13713,35 @@
 
         if (Target)
         {
+            int32 healcurr = 0;
+            Unit::AuraMap const &auramap = Target->GetAuras();
+            for (Unit::AuraMap::const_iterator itr = auramap.begin(); itr != auramap.end(); ++itr)
+                if (itr->second && itr->second->GetSpellProto()->Id == 41635)
+                {
+                    Aura* aura = itr->second;
+
+                    if (Unit* caster = aura->GetCaster())
+                    {
+                        SpellEntry const* spellProto = aura->GetSpellProto();
+                        int32 healbase = aura->GetModifier()->m_amount;
+                        healcurr = caster->SpellHealingBonus(spellProto, healbase, HEAL, Target);
+                    }
+                }
+
+            bool rebuff = (heal > healcurr);
+
             // IsHostileTo check duel and controlled by enemy
             if (Target != this && Target->isAlive() &&
-                (ExtraSrc ? (IsWithinDistInMap(source, radius) && Target->IsWithinDistInMap(source, radius))
-                          : IsWithinDistInMap(Target, radius)) &&
+                IsWithinDistInMap(Target, radius) &&
                 !Target->HasInvisibilityAura() && !IsHostileTo(Target) &&
-                !Target->HasAuraType(SPELL_AURA_MOD_UNATTACKABLE) &&
-                !Target->HasAuraType(SPELL_AURA_PRAYER_OF_MENDING))
+                !Target->HasAuraType(SPELL_AURA_MOD_UNATTACKABLE) && rebuff)
                     nearMembers.push_back(Target);
 
             if (Pet *pet = Target->GetPet())
                 if (!PlayerOnly && pet != this && pet->isAlive() &&
-                    (ExtraSrc ? (IsWithinDistInMap(source, radius) && pet->IsWithinDistInMap(source, radius))
-                              : IsWithinDistInMap(pet, radius)) &&
+                    IsWithinDistInMap(pet, radius) &&
                     !pet->HasInvisibilityAura() && !IsHostileTo(pet) &&
-                    !pet->HasAuraType(SPELL_AURA_MOD_UNATTACKABLE) &&
-                    !pet->HasAuraType(SPELL_AURA_PRAYER_OF_MENDING))
+                    !pet->HasAuraType(SPELL_AURA_MOD_UNATTACKABLE) && rebuff)
                         nearMembers.push_back(pet);
         }
     }
diff --git a/src/game/Unit.h b/src/game/Unit.h
--- a/src/game/Unit.h
+++ b/src/game/Unit.h
@@ -982,7 +982,10 @@
         void GetPartyMember(std::list<Unit*> &units, float dist);
         void GetRaidMember(std::list<Unit*> &units, float dist);
         Unit* GetNextRandomRaidMember(float radius, bool PlayerOnly = false);
-        Unit* GetMostDamagedRaidMember(float radius, bool PlayerOnly = false, bool ExtraSrc = false, Unit const* source = NULL);
+
+        // Prayer of Mending target selection
+        Unit* GetNextPoMTarget(float radius, int32 heal, bool PlayerOnly = false);
+
         bool IsContestedGuard() const
         {
             if (FactionTemplateEntry const* entry = getFactionTemplateEntry())