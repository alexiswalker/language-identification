-module(sliding_window_mnesia).

-behaviour(sliding_window).

-include_lib("stdlib/include/qlc.hrl").
-include_lib("include/sliding_window.hrl").

-define(TABLE_NAME, event).

-record(event, {id, added_time, event}).

-export([new/1, add/2, events/1, event_info/2, reset/1]).

% API
new(Size) ->
    % Create the schema
    mnesia:create_schema([node()]),
    % Start Mnesia
    mnesia:start(),
    Attrs = {attributes, record_info(fields, event)},
    % Only store table in ram on one node
    mnesia:create_table(?TABLE_NAME, [Attrs, {ram_copies, [node()]}]),
    {Size, 1, ?TABLE_NAME}.

add({Size, Id, Window}, Event) ->
    % Remove old events as some might still exist in the table
    remove_old_events(Size, Window),
    % Add a new event to the table and return the event id.
    {atomic, _} = mnesia:transaction(fun() ->
                               EventRecord = #event{id=Id, added_time=sliding_window:timestamp(), event=Event},
                               mnesia:write(EventRecord)
                       end),
    {{Size, Id+1, Window}, Id}.

events({Size, Id, Window}) ->
    % Remove old events as some might still exist in the table
    remove_old_events(Size, Window),

    % Match all events in the table and map them to tuples. Return all events.
    Result = do(qlc:q([X || X <- mnesia:table(Window)])),
    TupleResults = lists:map(fun({event, EventId, TimeAdded, Event}) ->
                      {EventId, TimeAdded, Event}
              end, Result),
    {{Size, Id, Window}, TupleResults}.

event_info({Size, Id, Window}, EventId) ->
    % Remove old events as some might still exist in the table
    remove_old_events(Size, Window),

    % Find the event in the ETS table
    Result = do(qlc:q([{CurrentEventId, EventTimeAdded, Event} || #event{id=CurrentEventId, added_time=EventTimeAdded, event=Event} <- mnesia:table(Window),
                                                  CurrentEventId =:= EventId
             ])),
    case Result of
        [{EventId, EventTimeAdded, Event}] ->
            % If event exists return it along with the time remaining in the
            % window and the time elapsed. Also return the new window state.
            TimeElapsed = timer:now_diff(sliding_window:timestamp(), EventTimeAdded) / ?MEGA,
            TimeRemaining = timer:now_diff(EventTimeAdded, sliding_window:window_end_timestamp(Size)) / ?MEGA,
            {{Size, Id, Window}, {EventId, EventTimeAdded, TimeElapsed, TimeRemaining, Event}};
        [] ->
            % Return none if the event is not found
            {{Size, Id, Window}, none}
    end.

reset({Size, Id, Window}) ->
    % Empty the database
    mnesia:clear_table(Window),

    % Stop mnesia
    mnesia:stop(),
    {{Size, Id, Window}, ok}.

% Private Functions
remove_old_events(Size, Window) ->
    % Remove events that are outside the window of time
    WindowEndTime = sliding_window:window_end_timestamp(Size),

    OldEventsIds = do(qlc:q([Id || #event{id=Id, added_time=TimeAdded} <- mnesia:table(Window),
                                        TimeAdded < WindowEndTime
             ])),
    mnesia:transaction(fun() ->
                               lists:map(fun(Id) ->
                                                 mnesia:delete({event, Id})
                                         end, OldEventsIds)
                       end).

do(Q) ->
    F = fun() -> qlc:e(Q) end,
    {atomic, Val} = mnesia:transaction(F),
    Val.