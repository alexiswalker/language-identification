{-

This implementation accumulates the arguments into a list, then
applies them.  (Previous implementation attempts would apply the
arguments as they were read.)

This version only works on Doubles.  I expect I can make it work
on arbitrary Nums.


Example invocations:

-- 2 + 3 = 5
*Main> rpn 2 3 (+) :: Double
5.0

-- (2 + 3) / 15 = 1/3
*Main> rpn 2 3 (+) 15 (/) :: Double
0.3333333333333333

-- sin(2 pi / 3) = sqrt(3)/2
*Main> rpn pi 2 (*) 3 (/) sin 2 (**) :: Double
0.7500000000000001

-- See https://xkcd.com/217/
*Main> rpn 1 exp pi (**) pi (-) :: Double
19.99909997918947


One last example invocation and its pseudo-trace:

rpn 1 2 (+) 3 (*) :: Double
=> rpnAccum [] 1 2 (+) 3 (*) :: Double
=> rpnAccum [RPNNum 1] 2 (+) 3 (*) :: Double
=> rpnAccum [RPNNum 2, RPNNum 1] (+) 3 (*) :: Double
=> rpnAccum [RPNOp (+), RPNNum 2, RPNNum 1] 3 (*) :: Double
=> rpnAccum [RPNNum 3, RPNOp (+), RPNNum 2, RPNNum 1] (*) :: Double
=> rpnAccum [RPNOp (*), RPNNum 3, RPNOp (+), RPNNum 2, RPNNum 1] :: Double
=> rpnProcess [RPNOp (*), RPNNum 3, RPNOp (+), RPNNum 2, RPNNum 1]
=> head $ foldr rpnStep [] [RPNOp (*), RPNNum 3, RPNOp (+), RPNNum 2, RPNNum 1]
=> head $ foldr rpnStep [1] [RPNOp (*), RPNNum 3, RPNOp (+), RPNNum 2]
=> head $ foldr rpnStep [2, 1] [RPNOp (*), RPNNum 3, RPNOp (+)]
=> head $ foldr rpnStep [3] [RPNOp (*), RPNNum 3]
=> head $ foldr rpnStep [3, 2] [RPNOp (*)]
=> head $ foldr rpnStep [6] []
=> head $ [6]
=> 6

-}

{-# LANGUAGE FlexibleInstances, TypeFamilies #-}

-- ENTRY POINT

-- The entry point: start up the accumulator, which just eats up all
-- the arguments into a list.  The accumulator will pass control to
-- the rpnProcess when it's done.
rpn :: RPNReturnClass r => r
rpn = rpnAccum []


-- VARARGS MAGIC

-- The return class is what lets us know if we're at the end of the
-- argument list.  If we're called in a context that wants a Double,
-- then we're at the end.  If it wants a function, then we're not
-- there yet and need to bring in another argument.
class RPNReturnClass r where
   rpnAccum :: [RPNStoredArg] -> r

-- If it's expecting a function, bring it into the arglist.
instance (RPNRawArg a, RPNReturnClass r) => RPNReturnClass (a -> r) where
   rpnAccum arglist newarg = rpnAccum $ storeArg newarg : arglist

-- If it's expecting a Double, then we're done reading arguments and
-- can go into the processor.  (We'll be called with the arglist.)
instance RPNReturnClass Double where
   rpnAccum = rpnProcess


-- ARGUMENT LIST

-- The RPNStoredArg type is used as we store all the arguments to
-- "rpn" in a [RPNStoredArg] list.
data RPNStoredArg = RPNNum Double
                  | RPNBinaryOp (Double -> Double -> Double)
                  | RPNUnaryOp (Double -> Double)

-- The RPNRawArg class has the things that are acceptable inputs to
-- storeArg.  The storeArg method just calls the appropriate
-- constructor.
class RPNRawArg a where
    storeArg :: a -> RPNStoredArg

-- Adding a number to the stack.
instance RPNRawArg Double where
    storeArg = RPNNum

-- There's some oddities that I haven't worked out yet about the type
-- unifier as it gets applied to functions.  There may be better ways
-- to put this.
instance (a ~ Double) => RPNRawArg (a -> a -> a) where
    storeArg = RPNBinaryOp
instance (a ~ Double) => RPNRawArg (a -> a) where
    storeArg = RPNUnaryOp


-- PROCESSING

-- This part is pretty straightforward.  rpnProcess gets a list of the
-- RPN operations (in reverse order), iterates them through rpnStep,
-- and returns the head of the final stack.

rpnProcess :: [RPNStoredArg] -> Double
rpnProcess = head . foldr rpnStep []

rpnStep :: RPNStoredArg -> [Double] -> [Double]
rpnStep (RPNNum n) stack = n:stack
rpnStep (RPNBinaryOp f) (arg2:arg1:stack) = (f arg1 arg2):stack
rpnStep (RPNUnaryOp f) (arg:stack) = (f arg):stack